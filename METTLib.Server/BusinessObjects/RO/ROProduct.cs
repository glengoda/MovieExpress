// Generated 14 Mar 2023 12:33 - Singular Systems Object Generator Version 3.0.000
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace MELib.RO
{
    [Serializable]
    public class ROProduct
     : SingularReadOnlyBase<ROProduct>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
        }

        public static PropertyInfo<int?> CategoryIDProperty = RegisterProperty<int?>(c => c.CategoryID, "Category", null);
        /// <summary>
        /// Gets the Category value
        /// </summary>
        [Display(Name = "Category", Description = "")]
        public int? CategoryID
        {
            get { return GetProperty(CategoryIDProperty); }
        }

        public static PropertyInfo<string> ProductNameProperty = RegisterProperty<string>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = "")]
        public string ProductName
        {
            get { return GetProperty(ProductNameProperty); }
        }

        public static PropertyInfo<string> ProductDescriptionProperty = RegisterProperty<string>(c => c.ProductDescription, "Product Description", "");
        /// <summary>
        /// Gets the Product Description value
        /// </summary>
        [Display(Name = "Product Description", Description = "")]
        public string ProductDescription
        {
            get { return GetProperty(ProductDescriptionProperty); }
        }

        public static PropertyInfo<int> QuantityProperty = RegisterProperty<int>(c => c.Quantity, "Quantity", 0);
        /// <summary>
        /// Gets the Quantity value
        /// </summary>
        [Display(Name = "Quantity", Description = "")]
        public int Quantity
        {
            get { return GetProperty(QuantityProperty); }
        }

        public static PropertyInfo<bool> IsActiveProperty = RegisterProperty<bool>(c => c.IsActive, "Is Active", false);
        /// <summary>
        /// Gets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = "")]
        public bool IsActive
        {
            get { return GetProperty(IsActiveProperty); }
        }

        public static PropertyInfo<decimal> PriceProperty = RegisterProperty<decimal>(c => c.Price, "Price", (decimal)0);
        /// <summary>
        /// Gets the Price value
        /// </summary>
        [Display(Name = "Price", Description = "")]
        public decimal Price
        {
            get { return GetProperty(PriceProperty); }
        }
        
        public static PropertyInfo<string> ProductAvailabilityProperty = RegisterProperty<string>(c => c.ProductAvailability, "Product Availability", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Availability", Description = ""),
      StringLength(50, ErrorMessage = "Product Name cannot be more than 50 characters")]

        public string ProductAvailability
        {
            get { return GetProperty(ProductAvailabilityProperty); }
        }
        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(ProductIDProperty);
        }

        public override string ToString()
        {
            return this.ProductName;
        }

        #endregion

        #endregion

        #region " Data Access & Factory Methods "

        internal static ROProduct GetROProduct(SafeDataReader dr)
        {
            var r = new ROProduct();
            r.Fetch(dr);
            return r;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            int i = 0;
            LoadProperty(ProductIDProperty, sdr.GetInt32(i++));
            LoadProperty(CategoryIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
            LoadProperty(ProductNameProperty, sdr.GetString(i++));
            LoadProperty(ProductDescriptionProperty, sdr.GetString(i++));
            LoadProperty(QuantityProperty, sdr.GetInt32(i++));
            LoadProperty(IsActiveProperty, sdr.GetBoolean(i++));
            LoadProperty(PriceProperty, sdr.GetDecimal(i++));
            LoadProperty(ProductAvailabilityProperty, sdr.GetString(i++));
        }

        #endregion

    }

}